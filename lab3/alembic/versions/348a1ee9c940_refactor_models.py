"""Refactor models

Revision ID: 348a1ee9c940
Revises: 7bf661a1d662
Create Date: 2025-04-16 14:19:07.029881

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '348a1ee9c940'
down_revision: Union[str, None] = '7bf661a1d662'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('air_quality',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('air_quality_carbon_monoxide', sa.Float(), nullable=False),
    sa.Column('air_quality_ozone', sa.Float(), nullable=False),
    sa.Column('air_quality_nitrogen_dioxide', sa.Float(), nullable=False),
    sa.Column('air_quality_sulphur_dioxide', sa.Float(), nullable=False),
    sa.Column('air_quality_pm2', sa.Float(), nullable=False),
    sa.Column('air_quality_pm10', sa.Float(), nullable=False),
    sa.Column('air_quality_us_epa_index', sa.Integer(), nullable=False),
    sa.Column('air_quality_gb_defra_index', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['id'], ['weather_record.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###

    conn = op.get_bind()
    result = conn.execute(sa.text("""
    SELECT id,
           air_quality_carbon_monoxide,
           air_quality_ozone,
           air_quality_nitrogen_dioxide,
           air_quality_sulphur_dioxide,
           air_quality_pm2,
           air_quality_pm10,
           air_quality_us_epa_index,
           air_quality_gb_defra_index
    FROM weather_record
    """))
    for row in result:
        conn.execute(
            sa.text("""
                INSERT INTO air_quality (
                    id,
                    air_quality_carbon_monoxide,
                    air_quality_ozone,
                    air_quality_nitrogen_dioxide,
                    air_quality_sulphur_dioxide,
                    air_quality_pm2,
                    air_quality_pm10,
                    air_quality_us_epa_index,
                    air_quality_gb_defra_index
                ) VALUES (
                    :id, :air_quality_carbon_monoxide, :air_quality_ozone, :air_quality_nitrogen_dioxide,
                    :air_quality_sulphur_dioxide, :air_quality_pm2, :air_quality_pm10, :air_quality_us_epa_index, :air_quality_gb_defra_index
                )
            """),
            {"id": row.id,
             "air_quality_carbon_monoxide": row.air_quality_carbon_monoxide,
             "air_quality_ozone": row.air_quality_ozone,
             "air_quality_nitrogen_dioxide": row.air_quality_nitrogen_dioxide,
             "air_quality_sulphur_dioxide": row.air_quality_sulphur_dioxide,
             "air_quality_pm2": row.air_quality_pm2,
             "air_quality_pm10": row.air_quality_pm10,
             "air_quality_us_epa_index": row.air_quality_us_epa_index,
             "air_quality_gb_defra_index": row.air_quality_gb_defra_index}
        )


    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('weather_record', 'air_quality_nitrogen_dioxide')
    op.drop_column('weather_record', 'air_quality_us_epa_index')
    op.drop_column('weather_record', 'air_quality_pm10')
    op.drop_column('weather_record', 'air_quality_carbon_monoxide')
    op.drop_column('weather_record', 'air_quality_sulphur_dioxide')
    op.drop_column('weather_record', 'air_quality_pm2')
    op.drop_column('weather_record', 'air_quality_gb_defra_index')
    op.drop_column('weather_record', 'air_quality_ozone')

    # ### end Alembic commands ###




def downgrade() -> None:
    """Downgrade schema."""
    # ### add columns back ###
    op.add_column('weather_record', sa.Column('air_quality_ozone', sa.Float(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_gb_defra_index', sa.Integer(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_pm2', sa.Float(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_sulphur_dioxide', sa.Float(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_carbon_monoxide', sa.Float(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_pm10', sa.Float(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_us_epa_index', sa.Integer(), autoincrement=False))
    op.add_column('weather_record', sa.Column('air_quality_nitrogen_dioxide', sa.Float(), autoincrement=False))

    conn = op.get_bind()
    result = conn.execute(sa.text("""
        SELECT id,
               air_quality_carbon_monoxide,
               air_quality_ozone,
               air_quality_nitrogen_dioxide,
               air_quality_sulphur_dioxide,
               air_quality_pm2,
               air_quality_pm10,
               air_quality_us_epa_index,
               air_quality_gb_defra_index
        FROM air_quality
    """))

    for row in result:
        conn.execute(
            sa.text("""
                UPDATE weather_record
                SET 
                    air_quality_carbon_monoxide = :co,
                    air_quality_ozone = :ozone,
                    air_quality_nitrogen_dioxide = :no2,
                    air_quality_sulphur_dioxide = :so2,
                    air_quality_pm2 = :pm2,
                    air_quality_pm10 = :pm10,
                    air_quality_us_epa_index = :epa,
                    air_quality_gb_defra_index = :gb
                WHERE id = :id
            """),
            {
                "id": row.id,
                "co": row.air_quality_carbon_monoxide,
                "ozone": row.air_quality_ozone,
                "no2": row.air_quality_nitrogen_dioxide,
                "so2": row.air_quality_sulphur_dioxide,
                "pm2": row.air_quality_pm2,
                "pm10": row.air_quality_pm10,
                "epa": row.air_quality_us_epa_index,
                "gb": row.air_quality_gb_defra_index
            }
        )

    
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('air_quality')
    # ### end Alembic commands ###
